"use strict";(self.webpackChunkavail_docs_wiki=self.webpackChunkavail_docs_wiki||[]).push([[5578],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(a),m=o,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6763:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var n=a(7462),o=(a(7294),a(3905));a(4996);const r={id:"simple-node-deployment",title:"Avail Node - Simple Deployment",sidebar_label:"Simple Deployment",description:"Learn how to run deploy Avail Node on a server.",keywords:["docs","avail","node","da"],image:"https://docs.availproject.org/img/avail/AvailDocs.png"},i=void 0,l={unversionedId:"operate/validator/simple-node-deployment",id:"operate/validator/simple-node-deployment",title:"Avail Node - Simple Deployment",description:"Learn how to run deploy Avail Node on a server.",source:"@site/docs/operate/validator/0020-simple-deployment.md",sourceDirName:"operate/validator",slug:"/operate/validator/simple-node-deployment",permalink:"/operate/validator/simple-node-deployment",draft:!1,editUrl:"https://github.com/availproject/availproject.github.io/tree/main/docs/operate/validator/0020-simple-deployment.md",tags:[],version:"current",lastUpdatedBy:"Danny",lastUpdatedAt:1707412871,formattedLastUpdatedAt:"Feb 8, 2024",sidebarPosition:20,frontMatter:{id:"simple-node-deployment",title:"Avail Node - Simple Deployment",sidebar_label:"Simple Deployment",description:"Learn how to run deploy Avail Node on a server.",keywords:["docs","avail","node","da"],image:"https://docs.availproject.org/img/avail/AvailDocs.png"},sidebar:"avail",previous:{title:"Basics",permalink:"/operate/validator/avail-node-basics"},next:{title:"Session Keys",permalink:"/operate/validator/session-keys"}},s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Cloud Server",id:"cloud-server",level:2},{value:"Bare Metal",id:"bare-metal",level:2},{value:"Docker/Podman",id:"dockerpodman",level:2},{value:"What&#39;s Next",id:"whats-next",level:2}],p={toc:d},u="wrapper";function c(e){let{components:t,...a}=e;return(0,o.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("admonition",{title:"Before you start",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This chapter continues from the 'Basics' page, so be sure to read that one before proceeding with this one.\nBefore trying anything, thoroughly read the chapter before doing any actual work.")),(0,o.kt)("p",null,"This guide aims to help you learn the basics of deploying your Avail Node manually or by docker/podman."),(0,o.kt)("h2",{id:"cloud-server"},"Cloud Server"),(0,o.kt)("p",null,"Deploying long-lasting services is best done on an online machine more than 99% of the time and is dedicated solely to running that service. This means that your Avail Node should not be deployed on a personal computer; running it on your Homelab or a cloud provider is a better option."),(0,o.kt)("p",null,"There are many cloud providers to choose from. Here are some of them:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"AWS"),(0,o.kt)("li",{parentName:"ul"},"Microsoft Azure"),(0,o.kt)("li",{parentName:"ul"},"OVHCloud"),(0,o.kt)("li",{parentName:"ul"},"DigitalOcean"),(0,o.kt)("li",{parentName:"ul"},"Linode"),(0,o.kt)("li",{parentName:"ul"},"Google Cloud Platform")),(0,o.kt)("p",null,"It's up to you to research and pick one that will suit all your needs and requirements.\nIf you already have a running server, you can skip the rest of this section and go straight to the next one.\nThat said, Hetzner is used for this chapter and here are the steps on how to create a new instance there:"),(0,o.kt)("p",null,"First, create a project and name it appropriately."),(0,o.kt)("img",{src:"/img/hetzner/hetzner_new_project.png",width:"300px",height:"100%"}),(0,o.kt)("p",null,"Click on the 'Create Server' button and choose your desired location and image."),(0,o.kt)("img",{src:"/img/hetzner/hetzner_location_image.png",width:"100%",height:"100%"}),(0,o.kt)("p",null,"For the type, SharedvCPU and CX21 (or anything stronger) will do the trick."),(0,o.kt)("img",{src:"/img/hetzner/hetzner_type.png",width:"100%",height:"100%"}),(0,o.kt)("p",null,"Make sure that you have entered your SSH keys."),(0,o.kt)("img",{src:"/img/hetzner/hetzner_ssh_keys.png",width:"100%",height:"100%"}),(0,o.kt)("p",null,"Finally, give it a good name."),(0,o.kt)("img",{src:"/img/hetzner/hetzner_name.png",width:"500px",height:"100%"}),(0,o.kt)("p",null,"With the server created, you can copy the public IP and SSH in."),(0,o.kt)("img",{src:"/img/hetzner/hetzner_server_created.png",width:"100%",height:"100%"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ssh root@65.21.XXX.XXX\n")),(0,o.kt)("p",null,"Hopefully, you are greeted with the welcome message."),(0,o.kt)("img",{src:"/img/hetzner/hetzner_welcome_terminal.png",width:"100%",height:"100%"}),(0,o.kt)("p",null,"Before we continue with our deployment, let's make sure that our system is up to date."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo apt update\nsudo apt upgrade -y\n")),(0,o.kt)("h2",{id:"bare-metal"},"Bare Metal"),(0,o.kt)("p",null,"We have our server up and online. We updated all our dependencies and are ready to do the work. Let's create a folder in the home directory to store our binary and all the data it will generate."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir avail && cd avail\nmkdir node-data\n")),(0,o.kt)("p",null,"Depending on the user and operating system used, the path to our newly created folder can be ",(0,o.kt)("inlineCode",{parentName:"p"},"/root/avail")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"/home/ubuntu/avail"),' or any other variant. To get the full path, run this:"'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pwd\n# Example output: `/root/avail`\n")),(0,o.kt)("p",null,"From the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/availproject/avail/releases"},"Releases Page"),", we grab the latest version and unpack it."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Make sure that you always grab the binary from the latest version. When this guide was released, the latest version was v1.10.0.0. Also, ensure that you hold the correct one for your operating system.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Obtaning v.1.10.0.0 for Ubuntu 22.04\n# wget is a command-line utility for downloading files from the internet.\nwget https://github.com/availproject/avail/releases/download/v1.10.0.0/x86_64-ubuntu-2204-data-avail.tar.gz\n\n# tar is a command-line utility for working with tarballs, compressed or uncompressed archives containing one or more files or directories.\n# The -x option extracts files from an archive, and the -f option specifies the archive file. When used together as tar -xf, it removes the contents of the specified archive file.\ntar -xf x86_64-ubuntu-2204-data-avail.tar.gz\n\n# rm stands for "remove" in Linux and Unix-like operating systems. It is used to delete files or directories.\nrm x86_64-ubuntu-2204-data-avail.tar.gz\n')),(0,o.kt)("p",null,"We will create a system service file for our node to run automatically, even on restarts. Systemd will run our node as a daemon and manage it for us. To know more about systemd, go ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Systemd"},"here"),"."),(0,o.kt)("p",null,"Let's create a file on ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/systemd/system/")," and name it ",(0,o.kt)("inlineCode",{parentName:"p"},"avail.service"),". If you are using a non-root user, you will need to execute this operation using the ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo")," command."),(0,o.kt)("p",null,"For root users:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"touch /etc/systemd/system/avail.service\n")),(0,o.kt)("p",null,"For non-root users:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo touch /etc/systemd/system/avail.service\n")),(0,o.kt)("p",null,"Now open that file with your favorite text editor. If this is your first time using Linux first learn how to use ",(0,o.kt)("a",{parentName:"p",href:"https://www.howtogeek.com/42980/the-beginners-guide-to-nano-the-linux-command-line-text-editor/"},"nano")," before doing anything. Just like before, if you are on a non-root use you might need to execute the command using 'sudo'."),(0,o.kt)("p",null,"For root users:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Use nano or any other text editor like vim or emacs\nnano /etc/systemd/system/avail.service\n")),(0,o.kt)("p",null,"For non-root users:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Use nano or any other text editor like vim or emacs\nsudo nano /etc/systemd/system/avail.service\n")),(0,o.kt)("p",null,"Paste the following text and save it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[Unit]\nDescription=Avail Node\n\n[Service]\nExecStart=/root/avail/data-avail --chain goldberg -d /root/avail/node-data --validator --name MyAwesomeBareMetalNode\nRestart=on-failure\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\n")),(0,o.kt)("p",null,"Let's let's break it down for clarity."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Description"),': Provides a human-readable description of the service. In this case, it describes the service as "Avail Node". This description is mainly used for documentation purposes and can be displayed in various system management tools and commands.'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"ExecStart"),": Specifies the command to start the service. In this case, it runs the /root/avail/data-avail executable with a series of command-line arguments."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Restart"),": Defines the restart behavior of the service. In this case, the service will be restarted if it fails."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"RestartSec"),": Specifies the time to sleep before restarting the service after it exits unexpectedly. In this case, it's set to 5 seconds."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"WantedBy"),": Specifies the target or targets that this service should be included in. Here, it is set to multi-user.target, which is a common target for services that should be started in a multi-user system.")),(0,o.kt)("p",null,"We discussed what the command line arguments do in the previous chapter, so we won't repeat ourselves here."),(0,o.kt)("p",null,"Now, let's enable the service file and start our deamon"),(0,o.kt)("p",null,"For root users:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl enable avail.service\nsystemctl start avail.service\n")),(0,o.kt)("p",null,"For non-root users:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl enable avail.service\nsudo systemctl start avail.service\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"systemctl enable"),": This command is used to enable a service or a unit. When you enable a service, systemd creates symbolic links or other appropriate native configuration to start the service automatically when the system boots up."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"systemctl start"),": This command is used to start a service or a unit immediately, without waiting for the system to reboot.")),(0,o.kt)("p",null,"To check for logs, we can run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# -f Follow the journal\n# -n Number of journal entries to show\n# -u Show logs from the specified unit\njournalctl -f -n 1000 -u avail.service\n")),(0,o.kt)("p",null,"Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"...\nNov 29 14:56:23 MyAwesomeAvailServer data-avail[13040]: 2023-11-29 14:56:23 \u2699\ufe0f  Syncing 135.7 bps, target=#93564 (11 peers), best: #1475 (0x1fe8\u20269dc7), finalized #1024 (0xdff3\u20268159), \u2b07 1.4MiB/s \u2b06 26.5kiB/s\nNov 29 14:56:28 MyAwesomeAvailServer data-avail[13040]: 2023-11-29 14:56:28 \u2699\ufe0f  Syncing 144.5 bps, target=#93564 (11 peers), best: #2198 (0xef82\u202672af), finalized #2048 (0xd68a\u20265cfc), \u2b07 150.0kiB/s \u2b06 3.7kiB/s\nNov 29 14:56:33 MyAwesomeAvailServer data-avail[13040]: 2023-11-29 14:56:33 \u2699\ufe0f  Syncing 92.8 bps, target=#93564 (12 peers), best: #2662 (0xdb75\u20267806), finalized #2560 (0x1282\u2026a791), \u2b07 821.7kiB/s \u2b06 2.6kiB/s\n")),(0,o.kt)("p",null,"As expected, the node is syncing new blocks. If these logs are new to you, head back to the previous chapter where we explained in detail what they mean."),(0,o.kt)("h2",{id:"dockerpodman"},"Docker/Podman"),(0,o.kt)("p",null,"We have our server up and online. We updated all our dependencies and are now ready to do the actual work. In the home directory, let's create a folder where we are going to store all the data that the Avail Docker container will generate."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir avail && cd avail\nmkdir node-data\n")),(0,o.kt)("p",null,"Depending on the user and operating system used, the path to our newly created folder can be ",(0,o.kt)("inlineCode",{parentName:"p"},"/root/avail")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"/home/ubuntu/avail"),' or any other variant. To get the full path, run this:"'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pwd\n# Example output: `/root/avail`\n")),(0,o.kt)("p",null,"Depending on your preferences, install Docker or Podman (or both) and execute one of the commands below. Don't execute all of them.\nTo read more about Docker, check the ",(0,o.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"following page"),".\nTo read more about Podman, check the ",(0,o.kt)("a",{parentName:"p",href:"https://podman.io/"},"following page"),".\nTo read more about SELinux, check the ",(0,o.kt)("a",{parentName:"p",href:"https://www.redhat.com/en/topics/linux/what-is-selinux"},"following page"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Option 1: If you are using Docker with non-root user use this script\nsudo docker run --restart=on-failure -d -v /root/avail/node-data:/da/node-data -p 9944:9944 -p 30333:30333 docker.io/availj/avail:v1.8.0.3 --chain goldberg -d /da/node-data --validator --name MyAwesomeContainerNode\n\n# Option 2: If you are using Docker on SELinux use this script\ndocker run --restart=on-failure -d -v /root/avail/node-data:/da/node-data:z -p 9944 -p 30333 docker.io/availj/avail:v1.8.0.3 --chain goldberg -d /da/node-data --validator --name MyAwesomeContainerNode\n\n# Option 3: If you are using Podman use this script\npodman run -d -v /root/avail/node-data:/da/node-data -p 9944 -p 30333 docker.io/availj/avail:v1.8.0.3 --chain goldberg -d /da/node-data --validator --name MyAwesomeContainerNode\n\n# Option 4: If you are using Podman on SELinux use this script\npodman run -d -v /root/avail/node-data:/da/node-data:z -p 9944 -p 30333 docker.io/availj/avail:v1.8.0.3 --chain goldberg -d /da/node-data --validator --name MyAwesomeContainerNode\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Make sure that you replace ",(0,o.kt)("inlineCode",{parentName:"p"},"/root/avail/node-data")," with your own storage path. If your node-data is located in ",(0,o.kt)("inlineCode",{parentName:"p"},"/home/ubuntu/avail/node-data")," than the flag should look like this:\n",(0,o.kt)("inlineCode",{parentName:"p"},"-v /home/ubuntu/avail/node-data:/da/node-data"),".")),(0,o.kt)("p",null,"Let's break it down for clarity."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"--restart on-failure"),": It means that the container will be automatically restarted if it exits with a non-zero status, indicating a failure."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"-d"),": It means that the container will be automatically restarted if it exits with a non-zero status, indicating a failure."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"-v"),": Is used to mount a volume in a Docker container. Volumes in Docker provide a way to persist and share data between a Docker container and the host system or between different containers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"-p"),": is used to publish a container's port to the host. It allows you to map a port from the container to a port on the host, making services running inside the container accessible from outside."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"docker.io/availj/avail:v1.8.0.3"),": Refers to the name of the Docker image from which you want to create a container. A Docker image is a lightweight, stand-alone, executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files.")),(0,o.kt)("p",null,"We discussed what the command line arguments do in the previous chapter, so we won't repeat ourselves here."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Podman doesn't have the ",(0,o.kt)("inlineCode",{parentName:"p"},"--restart")," flag, instead it utilizes Quadlets. To know more about how to setup a Quadlet following ",(0,o.kt)("a",{parentName:"p",href:"https://www.redhat.com/sysadmin/quadlet-podman"},"this link"))),(0,o.kt)("p",null,"To check for logs, we can run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Option 1: If you are using Docker with root user use this script\ndocker logs -f $(docker ps -lq)\n\n# Option 2: If you are using Docker with non-root user use this script\nsudo docker logs -f $(docker ps -lq)\n\n# Option 3: If you are using Podman use this script\npodman logs -lf\n")),(0,o.kt)("p",null,"Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"2023-11-29 22:54:56 \u2699\ufe0f  Syncing 197.6 bps, target=#94986 (8 peers), best: #4363 (0x5374\u20260cc4), finalized #4321 (0xc708\u20267dc1), \u2b07 338.7kiB/s \u2b06 2.9kiB/s\n2023-11-29 22:55:01 \u2699\ufe0f  Syncing 62.0 bps, target=#94987 (8 peers), best: #4673 (0x7495\u2026e6ea), finalized #4608 (0x1783\u2026e94d), \u2b07 14.4kiB/s \u2b06 0.3kiB/s\n2023-11-29 22:55:06 \u2699\ufe0f  Syncing 225.4 bps, target=#94987 (8 peers), best: #5800 (0xbc68\u202613e8), finalized #5632 (0x5180\u202698c8), \u2b07 129.3kiB/s \u2b06 0.8kiB/s\n")),(0,o.kt)("p",null,"As expected, the node is syncing new blocks. If these logs are new to you, head back to the previous chapter where we explained in detail what they mean."),(0,o.kt)("h2",{id:"whats-next"},"What's Next"),(0,o.kt)("p",null,"This is where our story ends. We have a working node connected to the Goldberg chain and deployed on a cloud provider. If the system restarts or the Avail Node program suddenly ends, it will be automatically restarted, so there will be almost no downtime."))}c.isMDXComponent=!0}}]);