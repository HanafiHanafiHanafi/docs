"use strict";(self.webpackChunkavail_docs_wiki=self.webpackChunkavail_docs_wiki||[]).push([[8259],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=s(a),u=r,k=c["".concat(p,".").concat(u)]||c[u]||m[u]||i;return a?n.createElement(k,l(l({ref:t},d),{},{components:a})):n.createElement(k,l({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7581:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={id:"op-stack",title:"How to Use the OP Stack with Avail",sidebar_label:"Avail-Powered OP Stack Optimium",description:"Discover how to utilize Avail as a data availability layer.",keywords:["documentation","avail","develop","build","data availability","da"],image:"https://docs.availproject.org/img/avail/AvailDocs.png"},l=void 0,o={unversionedId:"build/op-stack/op-stack",id:"build/op-stack/op-stack",title:"How to Use the OP Stack with Avail",description:"Discover how to utilize Avail as a data availability layer.",source:"@site/docs/build/op-stack/op-stack.md",sourceDirName:"build/op-stack",slug:"/build/op-stack/",permalink:"/build/op-stack/",draft:!1,editUrl:"https://github.com/availproject/availproject.github.io/tree/main/docs/build/op-stack/op-stack.md",tags:[],version:"current",lastUpdatedBy:"Danny",lastUpdatedAt:1702531932,formattedLastUpdatedAt:"Dec 14, 2023",frontMatter:{id:"op-stack",title:"How to Use the OP Stack with Avail",sidebar_label:"Avail-Powered OP Stack Optimium",description:"Discover how to utilize Avail as a data availability layer.",keywords:["documentation","avail","develop","build","data availability","da"],image:"https://docs.availproject.org/img/avail/AvailDocs.png"},sidebar:"avail",previous:{title:"Overview",permalink:"/build/op-stack/overview"},next:{title:"Validium",permalink:"/category/validium"}},p={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Compile the Core Codebase",id:"compile-the-core-codebase",level:2},{value:"Build the Adapter Source",id:"build-the-adapter-source",level:3},{value:"Build the Optimism Geth Source",id:"build-the-optimism-geth-source",level:3},{value:"Get Access to a Goerli Node",id:"get-access-to-a-goerli-node",level:3},{value:"Generate and Secure Keys",id:"generate-and-secure-keys",level:2},{value:"Network Configuration and Setup",id:"network-configuration-and-setup",level:2},{value:"Core Contract Deployment",id:"core-contract-deployment",level:2},{value:"Setting Up L2 Configuration",id:"setting-up-l2-configuration",level:2},{value:"Initialize and Configure Geth",id:"initialize-and-configure-geth",level:2},{value:"Launch and Monitor Nodes",id:"launch-and-monitor-nodes",level:2},{value:"Running op-geth",id:"running-op-geth",level:3},{value:"Why Archive Mode?",id:"why-archive-mode",level:4},{value:"Reinitializing op-geth",id:"reinitializing-op-geth",level:4},{value:"Running op-node",id:"running-op-node",level:3},{value:"P2P Synchronization",id:"p2p-synchronization",level:4},{value:"Running op-batcher",id:"running-op-batcher",level:3},{value:"Controlling Batcher Costs",id:"controlling-batcher-costs",level:4},{value:"Running op-proposer",id:"running-op-proposer",level:3},{value:"Acquire Goerli ETH for Layer 2",id:"acquire-goerli-eth-for-layer-2",level:2},{value:"Conduct Test Transactions",id:"conduct-test-transactions",level:2}],d={toc:s},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Embark on setting up your own Avail-Optimism chain. This guide targets Ethereum's Goerli testnet and Avail Goldberg testnet. For a detailed understanding, review the ",(0,r.kt)("a",{parentName:"p",href:"https://stack.optimism.io/docs/build/getting-started/#know-before-you-go"},(0,r.kt)("ins",null,"Optimism Documentation")),"."),(0,r.kt)("p",null,"In this guide, you will conduct the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#prerequisites"},"Prerequisites")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#compile-the-core-codebase"},"Compile the Core Codebase"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#build-the-adapter-source"},"Build the Adapter Source")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#build-the-optimism-geth-source"},"Build the Optimism Geth Source")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#get-access-to-a-goerli-node"},"Get Access to a Goerli Node")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#generate-and-secure-keys"},"Generate and Secure Keys")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#network-configuration-and-setup"},"Network Configuration and Setup")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#core-contract-deployment"},"Core Contract Deployment")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setting-up-l2-configuration"},"Setting Up L2 Configuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#initialize-and-configure-geth"},"Initialize and Configure Geth")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#launch-and-monitor-nodes"},"Launch and Monitor Nodes"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#running-op-geth"},"Running op-geth"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#why-archive-mode"},"Why Archive Mode?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#reinitializing-op-geth"},"Reinitializing op-geth")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#running-op-node"},"Running op-node"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#p2p-synchronization"},"P2P Synchronization")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#running-op-batcher"},"Running op-batcher"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#controlling-batcher-costs"},"Controlling Batcher Costs")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#running-op-proposer"},"Running op-proposer")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#acquire-goerli-eth-for-layer-2"},"Acquire Goerli ETH for Layer 2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#conduct-test-transactions"},"Conduct Test Transactions"))),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Ensure you have installed the following software."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Installation commands are based on Ubuntu 20.04 LTS:")),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Software"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://git-scm.com/"},(0,r.kt)("ins",null,"Git"))),(0,r.kt)("td",{parentName:"tr",align:null},"OS default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://go.dev/"},(0,r.kt)("ins",null,"Go"))),(0,r.kt)("td",{parentName:"tr",align:null},"1.20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://nodejs.org/en/"},(0,r.kt)("ins",null,"Node"))),(0,r.kt)("td",{parentName:"tr",align:null},"16.19.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pnpm.io/installation"},(0,r.kt)("ins",null,"Pnpm"))),(0,r.kt)("td",{parentName:"tr",align:null},"8.5.6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://linux.die.net/man/1/make"},(0,r.kt)("ins",null,"Make"))),(0,r.kt)("td",{parentName:"tr",align:null},"OS default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/jqlang/jq"},(0,r.kt)("ins",null,"jq"))),(0,r.kt)("td",{parentName:"tr",align:null},"OS default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://direnv.net/"},(0,r.kt)("ins",null,"direnv"))),(0,r.kt)("td",{parentName:"tr",align:null},"Latest")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/foundry-rs/foundry#installation"},(0,r.kt)("ins",null,"Foundry"))),(0,r.kt)("td",{parentName:"tr",align:null},"Foundry will be installed locally within the project's environment, via ",(0,r.kt)("inlineCode",{parentName:"td"},"package.json")))))),(0,r.kt)("td",{valign:"top"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Install Git\nsudo apt install -y git curl make jq\n\n# Install Go\nwget https://go.dev/dl/go1.20.linux-amd64.tar.gz\ntar xvzf go1.20.linux-amd64.tar.gz\nsudo cp go/bin/go /usr/bin/go\nsudo mv go /usr/lib\necho export GOROOT=/usr/lib/go >> ~/.bashrc\n\n# Install Node.js\ncurl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -\nsudo apt-get install -y nodejs npm\n\n# Install Pnpm\nsudo npm install -g pnpm\n\n# Install Make\nsudo apt install -y make\n\n# Install jq\nsudo apt install -y jq\n\n# Install direnv\nsudo apt install -y direnv\n"))))),(0,r.kt)("h2",{id:"compile-the-core-codebase"},"Compile the Core Codebase"),(0,r.kt)("p",null,"Setting up the EVM Rollup requires compiling code from two critical repositories: the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/availproject/avail-op-stack-adapter"},(0,r.kt)("ins",null,"avail-op-stack-adapter monorepo"))," and the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum-optimism/op-geth"},(0,r.kt)("ins",null,"op-geth repository")),"."),(0,r.kt)("h3",{id:"build-the-adapter-source"},"Build the Adapter Source"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Clone and navigate to the Avail adapter:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/availproject/avail-op-stack-adapter.git\ncd avail-op-stack-adapter\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install modules (simultaneously, you may start ",(0,r.kt)("a",{parentName:"p",href:"#building-op-geth"},(0,r.kt)("ins",null,"building ",(0,r.kt)("inlineCode",{parentName:"a"},"op-geth"))),"):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm install\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Compile the necessary packages:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"make op-node op-batcher op-proposer\npnpm build\n")))),(0,r.kt)("h3",{id:"build-the-optimism-geth-source"},"Build the Optimism Geth Source"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Clone and navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"op-geth"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/ethereum-optimism/op-geth.git\ncd op-geth\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Compile ",(0,r.kt)("inlineCode",{parentName:"p"},"op-geth"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"make geth\n")))),(0,r.kt)("h3",{id:"get-access-to-a-goerli-node"},"Get Access to a Goerli Node"),(0,r.kt)("p",null,"For deploying to Goerli, access an L1 node using a provider like ",(0,r.kt)("a",{parentName:"p",href:"https://www.alchemy.com/"},(0,r.kt)("ins",null,"Alchemy"))," or ",(0,r.kt)("a",{parentName:"p",href:"https://notes.ethereum.org/@launchpad/goerli"},(0,r.kt)("ins",null,"run your own Goerli node")),"."),(0,r.kt)("h2",{id:"generate-and-secure-keys"},"Generate and Secure Keys"),(0,r.kt)("p",null,"Create four essential accounts with private keys:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Admin")," (contract upgrade authority)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Batcher")," (publishes Sequencer data to L1)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Proposer")," (publishes L2 results to L1)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Sequencer")," (signs blocks on the p2p network)")),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"cast wallet")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts-bedrock")," package for key generation:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts-bedrock"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd avail-op-stack-adapter/packages/contracts-bedrock\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Generate accounts:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'echo "Admin:"\ncast wallet new\necho "Proposer:"\ncast wallet new\necho "Batcher:"\ncast wallet new\necho "Sequencer:"\ncast wallet new\n')),(0,r.kt)("p",{parentName:"li"},"You should see an output similar to:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Admin:\nSuccessfully created new keypair.\nAddress:     0xc4A01194958DE0D90A876e8A5fc9D7B530072148\nPrivate key: 0xb8e39bd94a210e410c4024e1cc91014de45a5eb1e42f3aa99a368b5a5ac19b45\nProposer:\nSuccessfully created new keypair.\nAddress:     0xFC0374Ae658e46cA4022acA179d3cb6D8e1A4934\nPrivate key: 0xa9bc1b3f5deb1e00251df68bf86e3493b25bc5430665433546f2f9aacc748d1a\nBatcher:\nSuccessfully created new keypair.\nAddress:     0xD6857B5BE9468Be67d64ABaB48459378d5329b96\nPrivate key: 0xe9cd8960fc7984a301d567b819e0c62871eb2c7239c2e66b8f319eaa45c3cbd5\nSequencer:\nSuccessfully created new keypair.\nAddress:     0x33348817E4B1192D576C4f157e9a5EC93dc5392D\nPrivate key: 0xd98b49e11e4e0be9931017831395e6644a50c36285d08e14d1a479af5ee08675\n")),(0,r.kt)("p",{parentName:"li"},"Record and securely store these key details. You'll need to fund ",(0,r.kt)("inlineCode",{parentName:"p"},"Admin"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Proposer"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"Batcher")," with Goerli ETH (2 ETH for ",(0,r.kt)("inlineCode",{parentName:"p"},"Admin"),", 5 ETH for ",(0,r.kt)("inlineCode",{parentName:"p"},"Proposer"),", 10 ETH for ",(0,r.kt)("inlineCode",{parentName:"p"},"Batcher"),")."),(0,r.kt)("admonition",{parentName:"li",title:"Note for Production",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Use secure hardware for key management in production environments.\n",(0,r.kt)("inlineCode",{parentName:"p"},"cast wallet")," is not designed for production deployments.")))),(0,r.kt)("h2",{id:"network-configuration-and-setup"},"Network Configuration and Setup"),(0,r.kt)("p",null,"After building the repositories, configure your chain settings in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/availproject/avail-optimism/tree/129032f15b76b0d2a940443a39433de931a97a44/packages/contracts-bedrock"},(0,r.kt)("ins",null,"contracts-bedrock package")),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts-bedrock"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/avail-op-stack-adapter/packages/contracts-bedrock\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Copy the environment file:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cp .envrc.example .envrc\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Edit ",(0,r.kt)("inlineCode",{parentName:"p"},".envrc")," with necessary values:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ETH_RPC_URL"),": URL for your L1 node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PRIVATE_KEY"),": Private key of the Admin account."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DEPLOYMENT_CONTEXT"),': Name of the network; should be "avail-optimism"'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Activate the environment with ",(0,r.kt)("inlineCode",{parentName:"p"},"direnv"),":"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"If you need to install ",(0,r.kt)("inlineCode",{parentName:"p"},"direnv"),", ensure you also ",(0,r.kt)("a",{parentName:"p",href:"https://direnv.net/docs/hook.html"},(0,r.kt)("ins",null,"modify the shell configuration")),".")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"direnv allow .\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Choose an L1 block as a starting point using ",(0,r.kt)("inlineCode",{parentName:"p"},"cast")," command:"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Using a finalized L1 block as our starting block is best.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'cast block finalized --rpc-url $ETH_RPC_URL | grep -E "(timestamp|hash|number)"\n')),(0,r.kt)("p",{parentName:"li"},"You should get a response that looks like:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"hash                 0x784d8e7f0e90969e375c7d12dac7a3df6879450d41b4cb04d4f8f209ff0c4cd9\nnumber               8482289\ntimestamp            1676253324\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Next, create and modify ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy-config/avail-optimism.json")," based on ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy-config/getting-started.json"),". Retain the default settings provided in the configuration and apply the following modifications:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Replace ",(0,r.kt)("inlineCode",{parentName:"li"},"ADMIN")," with the address of the Admin account you generated earlier."),(0,r.kt)("li",{parentName:"ul"},"Replace ",(0,r.kt)("inlineCode",{parentName:"li"},"PROPOSER")," with the address of the Proposer account you generated earlier."),(0,r.kt)("li",{parentName:"ul"},"Replace ",(0,r.kt)("inlineCode",{parentName:"li"},"BATCHER")," with the address of the Batcher account you generated earlier."),(0,r.kt)("li",{parentName:"ul"},"Replace ",(0,r.kt)("inlineCode",{parentName:"li"},"SEQUENCER")," with the address of the Sequencer account you generated earlier."),(0,r.kt)("li",{parentName:"ul"},"Replace ",(0,r.kt)("inlineCode",{parentName:"li"},"BLOCKHASH")," with the blockhash you got from the cast command."),(0,r.kt)("li",{parentName:"ul"},"Replace ",(0,r.kt)("inlineCode",{parentName:"li"},"TIMESTAMP")," with the timestamp you got from the cast command. Note that although all the other fields are strings, this field is a number! Don\u2019t include the quotation marks."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Configure ",(0,r.kt)("inlineCode",{parentName:"p"},"enableDA")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"avail-optimism.json")," (",(0,r.kt)("inlineCode",{parentName:"p"},"true")," for Avail chain as DA, ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," for Ethereum).")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Enter ",(0,r.kt)("inlineCode",{parentName:"p"},"op-avail")," module:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/avail-op-stack-adapter/op-avail\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"config.json")," with necessary variables (",(0,r.kt)("inlineCode",{parentName:"p"},"seed"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"api_url"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"app_id"),")."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "seed": "test test test test test test test test test test test test",\n  "api_url": "wss://goldberg.avail.tools:443/ws",\n  "app_id": 1\n}\n')))),(0,r.kt)("h2",{id:"core-contract-deployment"},"Core Contract Deployment"),(0,r.kt)("p",null,"Deploy essential L1 contracts for the chain\u2019s functionality:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"/avail-op-stack-adapter/packages/contracts-bedrock/deployments"),", and create ",(0,r.kt)("inlineCode",{parentName:"p"},"avail-optimism")," directory:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/avail-op-stack-adapter/packages/contracts-bedrock/deployments\nmkdir avail-optimism\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"/avail-op-stack-adapter/packages/contracts-bedrock/")," and the deploy contracts (this can take up to 15 minutes):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"forge script scripts/Deploy.s.sol:Deploy --private-key $PRIVATE_KEY --broadcast --rpc-url $ETH_RPC_URL\nforge script scripts/Deploy.s.sol:Deploy --sig 'sync()' --private-key $PRIVATE_KEY --broadcast --rpc-url $ETH_RPC_URL\n")))),(0,r.kt)("h2",{id:"setting-up-l2-configuration"},"Setting Up L2 Configuration"),(0,r.kt)("p",null,"After configuring the L1 layer, focus shifts to establishing the L2 infrastructure. This involves generating three key files:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"genesis.json")," for the genesis block"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rollup.json")," for rollup configurations"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jwt.txt")," for secure communication between ",(0,r.kt)("inlineCode",{parentName:"li"},"op-node")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"op-geth"))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to the ",(0,r.kt)("inlineCode",{parentName:"p"},"op-node")," directory:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/avail-op-stack-adapter/op-node\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the following command, ensuring you replace ",(0,r.kt)("inlineCode",{parentName:"p"},"<RPC>")," with your specific L1 RPC URL. This generates the ",(0,r.kt)("inlineCode",{parentName:"p"},"genesis.json")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"rollup.json")," files:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go run cmd/main.go genesis l2 \\\n    --deploy-config ../packages/contracts-bedrock/deploy-config/avail-optimism.json \\\n    --deployment-dir ../packages/contracts-bedrock/deployments/avail-optimism/ \\\n    --outfile.l2 genesis.json \\\n    --outfile.rollup rollup.json \\\n    --l1-rpc=$L1_RPC\n")),(0,r.kt)("p",{parentName:"li"},"You'll find the newly created ",(0,r.kt)("inlineCode",{parentName:"p"},"genesis.json")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"rollup.json")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"op-node")," package.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt.txt")," file, which is crucial for the secure interaction between nodes:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl rand -hex 32 > jwt.txt\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"To get ",(0,r.kt)("inlineCode",{parentName:"p"},"op-geth")," ready, move the ",(0,r.kt)("inlineCode",{parentName:"p"},"genesis.json")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt.txt")," files into its directory:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cp genesis.json ~/op-geth\ncp jwt.txt ~/op-geth\n")))),(0,r.kt)("p",null,"These steps ensure the L2 layer is correctly configured and ready for integration with the L1 components, paving the way for a fully functional EVM Rollup on the Avail-OP Stack."),(0,r.kt)("h2",{id:"initialize-and-configure-geth"},"Initialize and Configure Geth"),(0,r.kt)("p",null,"Prepare ",(0,r.kt)("inlineCode",{parentName:"p"},"op-geth")," for running the chain:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"op-geth"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/op-geth\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a data directory:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir datadir\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Initialize with the genesis file:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"build/bin/geth init --datadir=datadir genesis.json\n")))),(0,r.kt)("h2",{id:"launch-and-monitor-nodes"},"Launch and Monitor Nodes"),(0,r.kt)("p",null,"Running ",(0,r.kt)("inlineCode",{parentName:"p"},"op-geth")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"op-node")," is essential for every node. ",(0,r.kt)("inlineCode",{parentName:"p"},"op-batcher")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"op-proposer")," are exclusive to the sequencer."),(0,r.kt)("p",null,"Set the following environment variables:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variable"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SEQ_KEY")),(0,r.kt)("td",{parentName:"tr",align:null},"Sequencer private key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BATCHER_KEY")),(0,r.kt)("td",{parentName:"tr",align:null},"Batcher private key (minimum 1 ETH)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PROPOSER_KEY")),(0,r.kt)("td",{parentName:"tr",align:null},"Proposer private key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"L1_RPC")),(0,r.kt)("td",{parentName:"tr",align:null},"L1 node URL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RPC_KIND")),(0,r.kt)("td",{parentName:"tr",align:null},"L1 server type (e.g., alchemy, quicknode)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"L2OO_ADDR")),(0,r.kt)("td",{parentName:"tr",align:null},"L2OutputOracleProxy address")))),(0,r.kt)("h3",{id:"running-op-geth"},"Running op-geth"),(0,r.kt)("p",null,"To initiate ",(0,r.kt)("inlineCode",{parentName:"p"},"op-geth"),", navigate to its directory and execute the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'cd ~/op-geth\n./build/bin/geth \\\n  --datadir ./datadir \\\n  --http \\\n  --http.corsdomain="*" \\\n  --http.vhosts="*" \\\n  --http.addr=0.0.0.0 \\\n  --http.port=9545 \\\n  --http.api=web3,debug,eth,txpool,net,engine \\\n  --ws \\\n  --ws.addr=0.0.0.0 \\\n  --ws.port=9546 \\\n  --ws.origins="*" \\\n  --ws.api=debug,eth,txpool,net,engine \\\n  --syncmode=full \\\n  --gcmode=archive \\\n  --nodiscover \\\n  --maxpeers=0 \\\n  --networkid=42069 \\\n  --authrpc.vhosts="*" \\\n  --authrpc.addr=0.0.0.0 \\\n  --authrpc.port=9551 \\\n  --authrpc.jwtsecret=./jwt.txt \\\n  --rollup.disabletxpoolgossip=true\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"op-geth")," is now active, but block creation will begin once ",(0,r.kt)("inlineCode",{parentName:"p"},"op-node")," is operational."),(0,r.kt)("h4",{id:"why-archive-mode"},"Why Archive Mode?"),(0,r.kt)("p",null,"Archive mode, requiring more disk space than full mode, is essential for:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"op-proposer")," to access the full state history."),(0,r.kt)("li",{parentName:"ol"},"The explorer's functionality.")),(0,r.kt)("h4",{id:"reinitializing-op-geth"},"Reinitializing op-geth"),(0,r.kt)("p",null,"In cases of database corruption indicated by ",(0,r.kt)("inlineCode",{parentName:"p"},"op-node")," errors or failure to find L2 heads, follow these steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Stop ",(0,r.kt)("inlineCode",{parentName:"li"},"op-geth"),"."),(0,r.kt)("li",{parentName:"ol"},"Remove the existing data:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/op-geth\nrm -rf datadir/geth\n"))),(0,r.kt)("li",{parentName:"ol"},"Reinitialize:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"build/bin/geth init --datadir=datadir genesis.json\n"))),(0,r.kt)("li",{parentName:"ol"},"Restart ",(0,r.kt)("inlineCode",{parentName:"li"},"op-geth")," and then ",(0,r.kt)("inlineCode",{parentName:"li"},"op-node"),".")),(0,r.kt)("h3",{id:"running-op-node"},"Running op-node"),(0,r.kt)("p",null,"To launch ",(0,r.kt)("inlineCode",{parentName:"p"},"op-node"),", which acts as a consensus client, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/avail-op-stack-adapter/op-node\n./bin/op-node \\\n  --l2=http://localhost:9551 \\\n  --l2.jwt-secret=./jwt.txt \\\n  --sequencer.enabled \\\n  --sequencer.l1-confs=3 \\\n  --verifier.l1-confs=3 \\\n  --rollup.config=./rollup.json \\\n  --rpc.addr=0.0.0.0 \\\n  --rpc.port=9547 \\\n  --p2p.disable \\\n  --rpc.enable-admin \\\n  --p2p.sequencer.key=$SEQ_KEY \\\n  --l1=$L1_RPC \\\n  --l1.rpckind=$RPC_KIND\n")),(0,r.kt)("p",null,"Block creation will commence once ",(0,r.kt)("inlineCode",{parentName:"p"},"op-node")," starts processing L1 information and interfaces with ",(0,r.kt)("inlineCode",{parentName:"p"},"op-geth"),"."),(0,r.kt)("h4",{id:"p2p-synchronization"},"P2P Synchronization"),(0,r.kt)("p",null,"To optimize synchronization and avoid network resource waste:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Disable p2p sync (",(0,r.kt)("inlineCode",{parentName:"li"},"--p2p.disable"),") by default."),(0,r.kt)("li",{parentName:"ul"},"Use specific command line parameters for synchronization among multiple nodes.")),(0,r.kt)("h3",{id:"running-op-batcher"},"Running op-batcher"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"op-batcher")," is crucial in publishing transactions from the Sequencer to L1. Ensure it has at least 1 Goerli ETH for operational continuity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/avail-op-stack-adapter/op-batcher\n./bin/op-batcher \\\n  --l2-eth-rpc=http://localhost:9545 \\\n  --rollup-rpc=http://localhost:9547 \\\n  --poll-interval=10s \\\n  --sub-safety-margin=6 \\\n  --num-confirmations=1 \\\n  --safe-abort-nonce-too-low-count=3 \\\n  --resubmission-timeout=30s \\\n  --rpc.addr=0.0.0.0 \\\n  --rpc.port=9548 \\\n  --rpc.enable-admin \\\n  --max-channel-duration=1 \\\n  --l1-eth-rpc=$L1_RPC \\\n  --private-key=$BATCHER_KEY\n")),(0,r.kt)("h4",{id:"controlling-batcher-costs"},"Controlling Batcher Costs"),(0,r.kt)("p",null,"Adjust the ",(0,r.kt)("inlineCode",{parentName:"p"},"--max-channel-duration=n")," setting to balance transaction frequency on L1 and the operational costs of the batcher."),(0,r.kt)("h3",{id:"running-op-proposer"},"Running op-proposer"),(0,r.kt)("p",null,"Finally, start ",(0,r.kt)("inlineCode",{parentName:"p"},"op-proposer")," to propose new state roots:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/avail-op-stack-adapter/op-proposer\n./bin/op-proposer \\\n  --poll-interval=12s \\\n  --rpc.port=9560 \\\n  --rollup-rpc=http://localhost:9547 \\\n  --l2oo-address=$L2OO_ADDR \\\n  --private-key=$PROPOSER_KEY \\\n  --l1-eth-rpc=$L1_RPC\n")),(0,r.kt)("h2",{id:"acquire-goerli-eth-for-layer-2"},"Acquire Goerli ETH for Layer 2"),(0,r.kt)("p",null,"To obtain ETH on your Rollup:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts-bedrock"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/avail-op-stack-adapter/packages/contracts-bedrock\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Find the L1 standard bridge contract address:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat deployments/avail-optimism/L1StandardBridgeProxy.json | jq -r .address\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Send Goerli ETH to the bridge contract address."))),(0,r.kt)("h2",{id:"conduct-test-transactions"},"Conduct Test Transactions"),(0,r.kt)("p",null,"You now have a fully operational Avail-Powered Optimism-based EVM Rollup. Experiment with it as you would with any other test blockchain."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Congratulations on setting up your chain!")))}m.isMDXComponent=!0}}]);